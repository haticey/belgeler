   Link: [1]canonical
   Link: [2]RSS (alternate)
   Link: [3]canonical
   [4]IFrame

                                    Contents

                                     Share

     *  [5]Twitter
     *  [6]Facebook
     *  [7]Google+
     *  [8]Hacker News

                                     Share

     *  [9]Twitter
     *  [10]Facebook
     *  [11]Google+
     *  [12]Hacker News

   [13]×

    Sign up for our newsletter.

   Get the latest tutorials on SysAdmin and open source topics.

   [14]_____________________
   [15]Sign Up
   Thanks for signing up!
   [16]Sign Up [17]Log In
   [18]_____________________ [19]submit

     * [20]Tutorials
     * [21]Questions
     * [22]Projects
     * [23]Meetups
     * [24]Main Site

   DigitalOcean [25]Community
   Menu

     * [26]Tutorials
     * [27]Questions
     * [28]Projects
     * [29]Meetups
     * [30]Main Site

   [31]Sign Up [32]Log In
   [33]_____________________ [34]submit
   [35]View All Results
   [36][manicas]
   By:
   [37]Mitchell Anicas
   Subscribe Subscribed
   [38]Share
   [39]Contents
   We hope you find this tutorial helpful. In addition to guides like this
   one, we provide simple cloud infrastructure for developers. [40]Learn more
   →
   [41]20

      How To Use Ansible and Tinc VPN to Secure Your Server Infrastructure

   PostedFebruary 18, 2016 28.2k views [42]Security [43]Ansible [44]VPN
   [45]Networking [46]Configuration Management [47]CentOS [48]Ubuntu

  Introduction

   In this tutorial, we will demonstrate how to use Ansible, a configuration
   management tool, to set up a mesh VPN with Tinc to secure network
   communications between your Ubuntu and CentOS servers.

   A mesh VPN is especially useful if your servers are using a shared
   network, like [49]DigitalOcean's datacenter-wide private networking
   feature, because it enables your servers to communicate as if they were
   isolated on a truly private network. The extra layer of security provided
   by the authentication and encryption features of the VPN will protect the
   network communication of your private services—databases, Elasticsearch
   clusters, and more—from unauthorized access or attacks.

   [50][Mesh VPN Diagram]

   Manually configuring and maintaining a VPN across multiple servers is
   difficult and error-prone, because multiple configuration and key files
   need distributed amongst all VPN members. For this reason, a configuration
   management tool should be used for any practical mesh VPN setup whose
   members might change at some point. Any configuration management tool can
   be used, but this tutorial uses Ansible because it is popular and easy to
   use. The Ansible Playbook that this tutorial uses, [51]ansible-tinc, has
   been tested on Ubuntu 14.04 and CentOS 7 servers.

Background Reading

   You should be able to follow this tutorial and set up a mesh VPN without
   knowing too much about Ansible or Tinc, as the included Playbook will do
   most of the work for you. However, you may want to read up on how they
   work, at some point, so that you understand the details of what you are
   setting up.

   [52]This Tinc VPN tutorial covers how to install and configure Tinc VPN
   manually. Using Ansible to automate the process makes it a lot easier to
   manage.

   [53]How to Install and Configure Ansible provides a very high-level
   introduction to how Ansible works. If you want to start writing Ansible
   Playbooks to automate system administrator tasks, check out [54]this
   tutorial.

Prerequisites

  Local Machine

   The local machine is where you will execute the Ansible Playbook from.
   This could be your local machine (e.g. laptop) or some other server that
   you use to manage your servers. As mentioned earlier, it needs to be able
   to connect to each remote server as root.

   Your local machine needs to have Ansible 2.0+ installed. Refer to the
   [55]official Ansible installation documentation if you need to install it,
   as the installation process varies depending on your operating system or
   distribution.

   Your local machine also needs to have Git installed, so you can easily
   download a copy of the [56]ansible-tinc Playbook. Again, because the
   installation instructions depend on your local machine, refer to the
   [57]official Git installation guide.

  Remote Servers

   The remote servers are the hosts that you want to configure to use Tinc
   VPN. You should start with at least two. To work with the Ansible
   Playbook, they must be:

     * Running Ubuntu 14.04 or CentOS 7
     * Accessible to the local machine (where Ansible is installed) via the
       root user, [58]with public key authentication

   Note: It is not possible to use a different remote user at this time due
   to a [59]bug with the Ansible Synchronize module, which the Playbook uses.

   If you haven't already disabled password authentication for root, you can
   do so by adding PermitRootLogin without-password to your
   /etc/ssh/sshd_config file, then restarting SSH.

   If you are using DigitalOcean Droplets that are within the same
   datacenter, you should [60]enable Private Networking on all of them. This
   will allow you to use the private network interface, eth1, for the
   encrypted VPN communication. The provided Playbook assumes that every VPN
   node will use the same network device name.

Download Ansible-Tinc Playbook

   Once you're ready to get started, use git clone to download a copy of the
   Playbook. We'll clone it to our home directory:

 * cd ~
 * git clone https://github.com/thisismitch/ansible-tinc

   Now change to the newly-downloaded ansible-tinc directory:

 * cd ansible-tinc

   Note: The rest of this tutorial assumes that you are in the ansible-tinc
   directory, on your local machine. All Ansible commands must be executed
   from this directory. Also, all files referenced, with the exception of
   /etc/hosts, are relative to this path—e.g. hosts refers to
   ~/ansible-tinc/hosts.

   Next, we will show you how to use the Playbook to create your mesh VPN. If
   you are familiar with Ansible, you may want to take some time to browse
   the contents of the Playbook. Essentially, it installs and configures a
   mesh VPN using Tinc, and it also adds convenience entries into each
   server's /etc/hosts.

Create Host Inventory File

   Before running the Playbook, you must create a hosts file that contains
   information about the servers you want to include in your Tinc VPN. We'll
   go over the contents of the hosts file now.

   ~/ansible-tinc/hosts example

 [vpn]
 node01 vpn_ip=10.0.0.1 ansible_host=192.0.2.55
 node02 vpn_ip=10.0.0.2 ansible_host=192.0.2.240
 node03 vpn_ip=10.0.0.3 ansible_host=198.51.100.4
 node04 vpn_ip=10.0.0.4 ansible_host=198.51.100.36

 [removevpn]

   The first line, [vpn], specifies that the host entries directly below it
   are part of the "vpn" group. Members of this group will have the Tinc mesh
   VPN configured on them.

     * The first column is where you set the inventory name of a host,
       "node01" in the first line of the example, how Ansible will refer to
       the host. This value is used to configure Tinc connections, and to
       generate /etc/hosts entries. Do not use hyphens here, as Tinc does not
       support them in host names
     * vpn_ip is the IP address that the node will use for the VPN. Assign
       this to the IP address that you want the server to use for its VPN
       connections
     * ansible_host must be set to a value that your local machine can reach
       the node at (i.e. a real IP address or hostname)

   Therefore, in the example, we have four hosts that we want to configure in
   a mesh VPN that looks like this:

   [61][Example Mesh VPN Diagram]

   Once your hosts file contains all of the servers you want to include in
   your VPN, save your changes. Be sure that it does not contain duplicate
   entries (hostnames, vpn_ip addresses, or ansible_host values).

   At this point, you should test that Ansible can connect to all of the
   hosts in your inventory file:

 * ansible all -m ping

   They should all respond with a green "SUCCESS" message. If any of the
   connections fail, check your hosts file for errors and ensure that all of
   the servers in question meet the requirements listed in the
   [62]prerequisites section before moving on.

Review Group Variables

   Before running the Playbook, you may want to review the contents of the
   /group_vars/all file:

   /group_vars/all

 * ---
 * 
 * netname: nyc3
 * physical_ip: "{{ ansible_eth1.ipv4.address }}"
 * 
 * vpn_interface: tun0
 * 
 * vpn_netmask: 255.255.255.0
 * vpn_subnet_cidr_netmask: 32

   The two most important variables are physical_ip and vpn_netmask:

     * physical_ip specifies which IP address you want tinc to bind to. Here,
       we are leveraging an Ansible Fact to set it to the IP address of the
       eth1 network device. On DigitalOcean, eth1 is the private network
       interface, so Private Networking must be enabled unless you would
       rather use the public network interface, eth0, by changing its value
       to {{ ansible_eth0.ipv4.address }}
     * vpn_netmask specifies the netmask that the will be applied to the VPN
       interface. By default, it's set to 255.255.255.0, which means that
       each vpn_ip is a Class C address which can only communicate with other
       hosts within the same subnet. For example, a 10.0.0.x will not be able
       to communicate with a 10.0.1.x host unless the subnet is enlarged by
       changing vpn_netmask to something like 255.255.0.0.

   Note: The security benefits of the VPN can be extended to your servers
   over the public Internet, but keep in mind that the communication will
   still have the same latency and bandwidth limitations as the non-VPN
   connection.

   Here's an explanation of the other settings:

     * netname specifies the tinc netname. It's set to nyc3 by default.
     * vpn_interface is the name of the virtual network interface that tinc
       will use. It is tun0 by default.
     * vpn_subnet_cidr_netmask is set to 32, which indicates a single-host
       subnet (point-to-point) because we are configuring a mesh VPN. Don't
       change this value.

   Once you're done reviewing the group variables, you should be ready move
   on to the next step.

Deploy Tinc VPN

   Now that have created an inventory hosts file and reviewed the group
   variables, you're ready to deploy Tinc and set up the VPN across your
   servers by running the Playbook.

   From the ansible-tinc directory, run this command to run the Playbook:

 * ansible-playbook site.yml

   While the Playbook runs, it should provide the output of each task that is
   executed. If everything is configured correctly, you should see several ok
   and changed statuses, and zero failed statuses:

 PLAY RECAP *********************************************************************
 node01                     : ok=18   changed=15   unreachable=0    failed=0
 node02                     : ok=18   changed=15   unreachable=0    failed=0
 node03                     : ok=21   changed=19   unreachable=0    failed=0
 node04                     : ok=21   changed=19   unreachable=0    failed=0

   If there are no failed tasks, all of the hosts in the inventory file
   should be able to communicate with each other over the VPN network.

Test the VPN

   Log in to your first host and ping the second host:

 * ping 10.0.0.2

   Because the Playbook automatically creates /etc/hosts entries that point
   the inventory hostname to the VPN IP address of each member, you can also
   do something like this (assuming one of your hosts is named node02 in the
   Ansible hosts file):

 * ping node02

   Either way, you should see valid ping responses:

 [secondary_label Output:
 PING node02 (10.0.0.2) 56(84) bytes of data.
 64 bytes from node02 (10.0.0.2): icmp_seq=1 ttl=64 time=1.42 ms
 64 bytes from node02 (10.0.0.2): icmp_seq=2 ttl=64 time=1.03 ms
 ...

   Feel free to test the VPN connections between the other nodes.

   Note: Tinc uses port 655. If your ping test isn't working, be sure that
   the firewall of each node allows the appropriate traffic over the real
   network device that the VPN is using.

   Once you complete your testing, your mesh VPN is ready to be used!

Configure Services and Applications

   Now that your mesh VPN is set up, you need to be sure to configure your
   backend services and applications to use it (where appropriate). This
   means that any services that should be communicating over the VPN need to
   use the appropriate VPN IP addresses (vpn_ip) instead of the normal
   private IP address.

   For example, assume you're running a LEMP stack with Nginx on node01 and a
   MySQL database on node02. MySQL should be configured to bind to the VPN IP
   address 10.0.0.2, the PHP application should connect to the database at
   10.0.0.2, and Nginx should listen on 192.0.2.55 (node01's public IP
   address).

   For another example, if node01, node02, and node03 are nodes in an
   Elasticsearch cluster, Elasticsearch should be configured to use 10.0.0.1,
   10.0.0.2, and 10.0.0.3 as the node IP addresses. Likewise, any clients
   that connect to the cluster should use the VPN addresses as well.

  Firewall Considerations

   You may need to update your firewall rules to allow traffic on the VPN
   network device, "tun0", or the VPN IP addresses.

How to Add or Remove Servers

  Add New Servers

   All servers listed in the the [vpn] group in the hosts file will be part
   of the VPN. To add new VPN members, simply add the new servers to the
   [vpn] group then re-run the Playbook:

 * ansible-playbook site.yml

  Remove Servers

   To remove VPN members, move hosts entries of the servers you want to
   remove under the [removevpn] group towards the bottom of the file.

   For example, if we wanted to remove node04, the hosts file would look like
   this:

   hosts — remove node04 from VPN

 [vpn]
 node01 vpn_ip=10.0.0.1 ansible_host=192.0.2.55
 node02 vpn_ip=10.0.0.2 ansible_host=192.0.2.240
 node03 vpn_ip=10.0.0.3 ansible_host=198.51.100.4

 [removevpn]
 node04 vpn_ip=10.0.0.4 ansible_host=198.51.100.36

   Save the hosts file. Note that the vpn_ip is optional and unused for
   [removevpn] group members.

   Then re-run the Playbook:

 * ansible-playbook site.yml

   This will stop Tinc and delete the Tinc configuration and host key files
   from the members of the [removevpn] group, removing them from the VPN.

   Note that removing hosts from the VPN will result in orphaned tinc hosts
   files and /etc/hosts entries on the remaining VPN members. This should not
   affect anything unless you later add new servers to the VPN but reuse the
   decommissioned names. Delete the appropriate /etc/hosts entries on each
   server, if this is a problem for you.

Conclusion

   Your server infrastructure should now be secure by a mesh VPN, by using
   Tinc and Ansible! If you need to modify the playbook to meet your specific
   needs, feel free to [63]fork it on GitHub.

   Good luck!

   [64][manicas]
   By:
   [65]Mitchell Anicas
   [66]Upvote20
   Subscribe Subscribed
   [67]Share

Spin up an SSD cloud server in under a minute.

   Simple setup. Full root access. Straightforward pricing.

   [68]Deploy Server

Related Tutorials

     * [69]How To Protect Your Server Against the Dirty COW Linux
       Vulnerability
     * [70]How to Create an Intranet with OpenVPN on Ubuntu 16.04
     * [71]How To Set Up vsftpd for a User's Directory on Ubuntu 16.04
     * [72]How To Secure GitLab with Let's Encrypt on Ubuntu 16.04
     * [73]How To Set Up vsftpd for Anonymous Downloads on Ubuntu 16.04

    6 Comments

   [74]
   _____________________
   [75]Log In to Comment

     [76]Load

   [77][Creative Commons License]
   This work is licensed under a [78]Creative Commons
   Attribution-NonCommercial-ShareAlike 4.0 International License.
   Copyright © 2016 DigitalOcean™ Inc.

     * [79]Community
     * [80]Tutorials
     * [81]Questions
     * [82]Projects
     * [83]Tags
     * [84]Newsletter
     * [85]RSS

     * [86]Distros & One-Click Apps
     * [87]Terms, Privacy, & Copyright
     * [88]Security
     * [89]Report a Bug
     * [90]Get Paid to Write

                                 Almost there!

   Sign into your account, or create a new one, to start interacting.
   [91]Log In [92]Sign Up

                                  Report a Bug

   Use this form to report bugs related to the Community
   Report a bug:
   [93]_____________________
   [94]_____________________
   [95]
   _____________________
   [96][ Submit ]

References

   Visible links
   1. https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure
   2. https://www.digitalocean.com/community/tutorials/feed
   3. https://www.digitalocean.com/community/
   4. https://www.googletagmanager.com/ns.html?id=GTM-KHWBBT
   5. Share on Twitter
	http://twitter.com/share?text=How To Use Ansible and Tinc VPN to Secure Your Server Infrastructure&url=https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=twshare
   6. Share on Facebook
	https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=fbshare
   7. Share on Google+
	https://plus.google.com/share?url=https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=gpshare
   8. Submit to Hacker News
	https://news.ycombinator.com/submitlink?t=How To Use Ansible and Tinc VPN to Secure Your Server Infrastructure&u=https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=hnshare
   9. Share on Twitter
	http://twitter.com/share?text=How To Use Ansible and Tinc VPN to Secure Your Server Infrastructure&url=https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=twshare
  10. Share on Facebook
	https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=fbshare
  11. Share on Google+
	https://plus.google.com/share?url=https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=gpshare
  12. Submit to Hacker News
	https://news.ycombinator.com/submitlink?t=How To Use Ansible and Tinc VPN to Secure Your Server Infrastructure&u=https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure?utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure&utm_medium=community&utm_source=hnshare
  13. javascript:;
  16. https://www.digitalocean.com/community/auth/digitalocean?display=sessionless+register
  17. https://www.digitalocean.com/community/auth/digitalocean
  20. https://www.digitalocean.com/community/tutorials
  21. https://www.digitalocean.com/community/questions
  22. https://www.digitalocean.com/community/projects
  23. https://www.meetup.com/pro/digitalocean/?utm_source=do_community
  24. https://www.digitalocean.com/
  25. https://www.digitalocean.com/community
  26. https://www.digitalocean.com/community/tutorials
  27. https://www.digitalocean.com/community/questions
  28. https://www.digitalocean.com/community/projects
  29. https://www.meetup.com/pro/digitalocean/?utm_source=do_community
  30. https://www.digitalocean.com/
  31. https://www.digitalocean.com/community/auth/digitalocean?display=sessionless+register
  32. https://www.digitalocean.com/community/auth/digitalocean
  35. https://www.digitalocean.com/community/search
  36. https://www.digitalocean.com/community/users/manicas
  37. https://www.digitalocean.com/community/users/manicas
  38. https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure#
  39. javascript:void(0);
  40. https://www.digitalocean.com/?utm_medium=community&utm_source=community_gencta&utm_campaign=needaserver&utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure
  42. https://www.digitalocean.com/community/tags/security?type=tutorials
  43. https://www.digitalocean.com/community/tags/ansible?type=tutorials
  44. https://www.digitalocean.com/community/tags/vpn?type=tutorials
  45. https://www.digitalocean.com/community/tags/networking?type=tutorials
  46. https://www.digitalocean.com/community/tags/configuration-management?type=tutorials
  47. https://www.digitalocean.com/community/tags/centos?type=tutorials
  48. https://www.digitalocean.com/community/tags/ubuntu?type=tutorials
  49. https://www.digitalocean.com/community/tutorials/how-to-set-up-and-use-digitalocean-private-networking
  51. https://github.com/thisismitch/ansible-tinc
  52. https://www.digitalocean.com/community/tutorials/how-to-install-tinc-and-set-up-a-basic-vpn-on-ubuntu-14-04
  53. https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-an-ubuntu-12-04-vps
  54. https://www.digitalocean.com/community/tutorials/how-to-create-ansible-playbooks-to-automate-system-configuration-on-ubuntu
  55. http://docs.ansible.com/ansible/intro_installation.html
  56. https://github.com/thisismitch/ansible-tinc
  57. https://git-scm.com/book/en/v2/Getting-Started-Installing-Git
  58. https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets
  59. https://github.com/ansible/ansible/issues/13825
  60. https://www.digitalocean.com/community/tutorials/how-to-set-up-and-use-digitalocean-private-networking
  62. https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure#prerequisites
  63. https://github.com/thisismitch/ansible-tinc
  64. https://www.digitalocean.com/community/users/manicas
  65. https://www.digitalocean.com/community/users/manicas
  67. https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure#
  68. https://www.digitalocean.com/?utm_medium=community&utm_source=community_gencta&utm_campaign=needaserver&utm_content=how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure
  69. https://www.digitalocean.com/community/tutorials/how-to-protect-your-server-against-the-dirty-cow-linux-vulnerability
  70. https://www.digitalocean.com/community/tutorials/how-to-create-an-intranet-with-openvpn-on-ubuntu-16-04
  71. https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-16-04
  72. https://www.digitalocean.com/community/tutorials/how-to-secure-gitlab-with-let-s-encrypt-on-ubuntu-16-04
  73. https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-anonymous-downloads-on-ubuntu-16-04
  75. https://www.digitalocean.com/community/auth/digitalocean
  76. https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure/comments
  77. https://creativecommons.org/licenses/by-nc-sa/4.0/
  78. https://creativecommons.org/licenses/by-nc-sa/4.0/
  79. https://www.digitalocean.com/community
  80. https://www.digitalocean.com/community/tutorials
  81. https://www.digitalocean.com/community/questions
  82. https://www.digitalocean.com/community/projects
  83. https://www.digitalocean.com/community/tags
  84. https://www.digitalocean.com/community/newsletter
  85. https://www.digitalocean.com/community/tutorials/feed
  86. https://www.digitalocean.com/features/one-click-apps/
  87. https://www.digitalocean.com/legal/terms/
  88. https://www.digitalocean.com/security/
  89. https://www.digitalocean.com/community/tutorials/how-to-use-ansible-and-tinc-vpn-to-secure-your-server-infrastructure#
  90. https://www.digitalocean.com/community/get-paid-to-write
  91. https://www.digitalocean.com/community/auth/digitalocean
  92. https://www.digitalocean.com/community/auth/digitalocean?display=sessionless+register
